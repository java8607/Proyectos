package com.almundo.callcenter;

import java.util.List;

import com.almundo.dto.Director;
import com.almundo.dto.Employee;
import com.almundo.dto.Operator;
import com.almundo.dto.Supervisor;
import com.almundo.utils.Property;

public class Dispatcher {

	public Dispatcher() {
	}

	public boolean dispatchCall() {
		List<Employee> operators = EmployeeFactory.filterEmployees(
				EmployeeFactory.operators, EmployeeFactory.isAvaibleToAnswer());
		
		List<Employee> supervisors = EmployeeFactory.filterEmployees(
				EmployeeFactory.supervisors,
				EmployeeFactory.isAvaibleToAnswer());
		
		List<Employee> directors = EmployeeFactory.filterEmployees(
				EmployeeFactory.directors,
				EmployeeFactory.isAvaibleToAnswer());
		
		if (!operators.isEmpty()) {
			setAvailability(Property.OPERATOR,EmployeeFactory.operators.size(),false);
		} else if(!supervisors.isEmpty()){
			setAvailability(Property.SUPERVISOR,EmployeeFactory.supervisors.size(),false);
		}else if(!directors.isEmpty()){
			setAvailability(Property.DIRECTOR,EmployeeFactory.directors.size(),false);
		}else{
			dispatchCall();
		}
		return true;
	}

	
	private void setAvailability(Property typeEmployee, int totalAvaible,boolean state){
		for (int i = 0; i < totalAvaible; i++) {
			if (typeEmployee.equals(Property.DIRECTOR) && EmployeeFactory.directors.get(i).isAvaible()!=state) {
				EmployeeFactory.directors.get(i).setAvaible(state);
				break;
			} else if (typeEmployee.equals(Property.SUPERVISOR) && EmployeeFactory.supervisors.get(i).isAvaible()!=state) {
				EmployeeFactory.supervisors.get(i).setAvaible(state);
				break;
			} else if (typeEmployee.equals(Property.OPERATOR) && EmployeeFactory.operators.get(i).isAvaible()!=state) {
				EmployeeFactory.operators.get(i).setAvaible(state);
				break;
			}
		}
	}
}
